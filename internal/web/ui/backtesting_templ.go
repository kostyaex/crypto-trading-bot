// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package ui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func BacktestingPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = headerComponent("Backtesting").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<body><div x-data=\"backtesting()\" class=\"container\"><h1>Бектестинг</h1><form @submit.prevent=\"submit\"><label for=\"datetime1\">Начало периода:</label> <input x-model=\"form.start\" type=\"datetime-local\" id=\"datetime1\" name=\"datetime1\" required><br><br><label for=\"datetime2\">Конец периода:</label> <input x-model=\"form.stop\" type=\"datetime-local\" id=\"datetime2\" name=\"datetime2\" required><br><br><button type=\"submit\">Подтвердить</button></form><h2>Результаты:</h2><p x-text=\"status\"></p><template x-for=\"result in results\"><p x-text=\"result.log\"></p></template><button class=\"button\" onclick=\"fillChart()\">Заполнить график</button><div id=\"chartContainer\" style=\"width: 600px; height: 300px;\"></div></div><script>\n\n        function convertDateToInputFormat(date) {\n            let year = date.getFullYear();\n            let month = String(date.getMonth() + 1).padStart(2, '0');\n            let day = String(date.getDate()).padStart(2, '0');\n            let hours = String(date.getHours()).padStart(2, '0');\n            let minutes = String(date.getMinutes()).padStart(2, '0');\n            \n            return `${year}-${month}-${day}T${hours}:${minutes}`;\n        }\n\n\t\tfunction backtesting() {\n            const currentTime = new Date();\n\t\t\treturn {\n                form: {\n                    start: convertDateToInputFormat(currentTime),\n                    stop: convertDateToInputFormat(currentTime),\n                },\n                status: \"\",\n                results: [],\n\t\t\t\tasync submit() {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/runbacktesting', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\t\tbody: JSON.stringify(this.form),\n\t\t\t\t\t});\n\n                    this.results = await response.json();\n\t\t\t\t\tthis.status = \"Выполнено\"\n\n\t\t\t\t\t// if (response.ok) {\n    \t\t\t\t// \tthis.status = \"Выполнено\"\n\t\t\t\t\t// } else {\n\t\t\t\t\t//     this.status = 'Ошибка выполнения';\n\t\t\t\t\t// }\n\t\t\t\t} catch (error) {\n                    this.status = 'Ошибка при отправке данных:'+error\n\t\t\t\t\tconsole.error('Ошибка при отправке данных:', error);\n\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n        function fillChart() {\n            // Получаем контейнер по ID\n            const chartContainer = document.getElementById('chartContainer');\n\n            const chartOptions = { layout: { textColor: 'black', background: { type: 'solid', color: 'white' } } };\n            const chart = LightweightCharts.createChart(chartContainer, chartOptions);\n            const areaSeries = chart.addSeries(LightweightCharts.LineSeries, { color: '#2962FF' });\n            areaSeries.setData([\n                { time: '2018-12-22', value: 32.51 },\n                { time: '2018-12-23', value: 31.11 },\n                { time: '2018-12-24', value: 27.02 },\n                { time: '2018-12-25', value: 27.32 },\n                { time: '2018-12-26', value: 25.17 },\n                { time: '2018-12-27', value: 28.89 },\n                { time: '2018-12-28', value: 25.46 },\n                { time: '2018-12-29', value: 23.92 },\n                { time: '2018-12-30', value: 22.68 },\n                { time: '2018-12-31', value: 22.67 },\n            ]);\n\n            // const candlestickSeries = chart.addSeries(LightweightCharts.CandlestickSeries, {\n            //     upColor: '#26a69a', downColor: '#ef5350', borderVisible: false,\n            //     wickUpColor: '#26a69a', wickDownColor: '#ef5350',\n            // });\n            // candlestickSeries.setData([\n            //     { time: '2018-12-22', open: 75.16, high: 82.84, low: 36.16, close: 45.72 },\n            //     { time: '2018-12-23', open: 45.12, high: 53.90, low: 45.12, close: 48.09 },\n            //     { time: '2018-12-24', open: 60.71, high: 60.71, low: 53.39, close: 59.29 },\n            //     { time: '2018-12-25', open: 68.26, high: 68.26, low: 59.04, close: 60.50 },\n            //     { time: '2018-12-26', open: 67.71, high: 105.85, low: 66.67, close: 91.04 },\n            //     { time: '2018-12-27', open: 91.04, high: 121.40, low: 82.70, close: 111.40 },\n            //     { time: '2018-12-28', open: 111.51, high: 142.83, low: 103.34, close: 131.25 },\n            //     { time: '2018-12-29', open: 131.33, high: 151.17, low: 77.68, close: 96.43 },\n            //     { time: '2018-12-30', open: 106.33, high: 110.20, low: 90.39, close: 98.10 },\n            //     { time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 111.26 },\n            // ]);\n\n            chart.timeScale().fitContent();\n        }\n\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
