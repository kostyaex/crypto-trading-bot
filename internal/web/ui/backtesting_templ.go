// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857

package ui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func BacktestingPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = headerComponent("Backtesting").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script src=\"/assets/js/vendor/plotly-3.0.1.min.js\" charset=\"utf-8\"></script><script src=\"https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js\"></script><script src=\"/assets/js/backtest.js\"></script><script src=\"/assets/js/charts.js\"></script></head><body><div x-data=\"backtesting()\" class=\"container\"><h1>Бектестинг</h1><form @submit.prevent=\"submit\"><label for=\"datetime1\">Начало периода:</label> <input x-model=\"form.start\" type=\"datetime-local\" id=\"datetime1\" name=\"datetime1\" required><br><br><label for=\"datetime2\">Конец периода:</label> <input x-model=\"form.stop\" type=\"datetime-local\" id=\"datetime2\" name=\"datetime2\" required><br><br><button class=\"button\" x-on:click=\"showMarketData\">Показать торговые данные</button> <button type=\"submit\">Запустить бектестинг</button></form><h2>Результаты:</h2><p x-text=\"status\"></p><template x-for=\"result in results\"><p x-text=\"result.log\"></p></template></div><div x-data=\"backtests()\" class=\"container\"><button class=\"button\" x-on:click=\"backtestsUrls\">Загрузить дампы</button><p x-text=\"status\"></p><template x-for=\"url in urls\"><button class=\"button\" x-text=\"url\" x-on:click=\"loadBacktest(url)\" x-init=\"$watch(&#39;backtests&#39;, newValue =&gt; chart.updateForBacktesting(newValue))\"></button></template></div><div class=\"container\"><div id=\"chartContainer\" style=\"height: 100%;width: 100%;box-sizing: border-box;\"></div></div><script>\n\n        const chart = NewChart()\n        chart.InitChart(\"chartContainer\")\n\n        function convertDateToInputFormat(date) {\n            let year = date.getFullYear();\n            let month = String(date.getMonth() + 1).padStart(2, '0');\n            let day = String(date.getDate()).padStart(2, '0');\n            let hours = String(date.getHours()).padStart(2, '0');\n            let minutes = String(date.getMinutes()).padStart(2, '0');\n            \n            return `${year}-${month}-${day}T${hours}:${minutes}`;\n        }\n\n\t\tfunction backtesting() {\n            const currentTime = new Date();\n\t\t\treturn {\n                form: {\n                    start: convertDateToInputFormat(currentTime),\n                    stop: convertDateToInputFormat(currentTime),\n                },\n                status: \"\",\n                results: [],\n                async showMarketData() {\n                    // дата вида 2025-07-23T17:59\n                    fillChart_MarketDataForPeriod(this.form.start, this.form.stop)\n                },\n\t\t\t\tasync submit() {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/runbacktesting', {\n                        cache: 'no-store',\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\t\tbody: JSON.stringify(this.form),\n\t\t\t\t\t});\n\n                    this.results = await response.json();\n\t\t\t\t\tthis.status = \"Выполнено\"\n\n\t\t\t\t\t// if (response.ok) {\n    \t\t\t\t// \tthis.status = \"Выполнено\"\n\t\t\t\t\t// } else {\n\t\t\t\t\t//     this.status = 'Ошибка выполнения';\n\t\t\t\t\t// }\n\t\t\t\t} catch (error) {\n                    this.status = 'Ошибка при отправке данных:'+error\n\t\t\t\t\tconsole.error('Ошибка при отправке данных:', error);\n\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
