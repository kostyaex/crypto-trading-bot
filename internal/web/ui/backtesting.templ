
package ui

templ BacktestingPage() {
    <!DOCTYPE html>
	<html lang="en">
    <head>
	@headerComponent("Backtesting")
    <script src="/assets/js/vendor/plotly-3.0.1.min.js" charset="utf-8"></script>
	<script src="https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js"></script>
	<script src="/assets/js/backtest.js"></script>
	<script src="/assets/js/charts.js"></script>
    </head>
	<body>
		<div x-data="backtesting()" class="container">
            <h1>Бектестинг</h1>
            <form @submit.prevent="submit">
                <label for="datetime1">Начало периода:</label>
                <input x-model="form.start" type="datetime-local" id="datetime1" name="datetime1" required>
                <br><br>
                <label for="datetime2">Конец периода:</label>
                <input x-model="form.stop" type="datetime-local" id="datetime2" name="datetime2" required>
                <br><br>
                <button class="button" x-on:click="showMarketData">Показать торговые данные</button>
                <button type="submit">Запустить бектестинг</button>
            </form>
            <h2>Результаты:</h2>
            <p x-text="status"></p>
            <template x-for="result in results">
                <p x-text="result.log"></p>
            </template>

        </div>

        <div x-data="backtests()" class="container">
            <button class="button" x-on:click="backtestsUrls">Загрузить дампы</button>
            <p x-text="status"></p>
            <template x-for="url in urls">
                <button class="button"
                    x-text="url"
                    x-on:click="loadBacktest(url)"
                    x-init="$watch('backtests', newValue => chart.updateForBacktesting(newValue))"></button>
            </template>

        </div>

        <div class="container">
            <div id="chartContainer" style="height: 800px;width: 100%;box-sizing: border-box;">
            </div>
        </div>

        <script>

        const chart = NewChart()
        chart.InitChart("chartContainer")

        function convertDateToInputFormat(date) {
            let year = date.getFullYear();
            let month = String(date.getMonth() + 1).padStart(2, '0');
            let day = String(date.getDate()).padStart(2, '0');
            let hours = String(date.getHours()).padStart(2, '0');
            let minutes = String(date.getMinutes()).padStart(2, '0');
            
            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }

		function backtesting() {
            const currentTime = new Date();
			return {
                form: {
                    start: convertDateToInputFormat(currentTime),
                    stop: convertDateToInputFormat(currentTime),
                },
                status: "",
                results: [],
                async showMarketData() {
                    // дата вида 2025-07-23T17:59
                    fillChart_MarketDataForPeriod(this.form.start, this.form.stop)
                },
				async submit() {
				try {
					const response = await fetch('/api/runbacktesting', {
                        cache: 'no-store',
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify(this.form),
					});

                    this.results = await response.json();
					this.status = "Выполнено"

					// if (response.ok) {
    				// 	this.status = "Выполнено"
					// } else {
					//     this.status = 'Ошибка выполнения';
					// }
				} catch (error) {
                    this.status = 'Ошибка при отправке данных:'+error
					console.error('Ошибка при отправке данных:', error);
				}
				},
			};
		}
		</script>
	</body>
	</html>
}
