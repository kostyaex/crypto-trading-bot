// –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
package systems

import (
	"context"
	"fmt"

	"github.com/andygeiss/ecs"
)

type stopSystem struct {
	cancelContext context.Context
}

func NewStopSystem(cancelContext context.Context) ecs.System {
	return &stopSystem{
		cancelContext: cancelContext,
	}
}

func (s *stopSystem) Process(em ecs.EntityManager) (state int) {

	// –ó–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
	select {
	case <-s.cancelContext.Done():
		fmt.Println("\nüõë (stopSystem) –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
		return ecs.StateEngineStop
	default:
		return ecs.StateEngineContinue
	}

}

func (s *stopSystem) Setup() {}

func (s *stopSystem) Teardown() {}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
var _ ecs.System = (*stopSystem)(nil)
