package systems

import (
	"context"
	"crypto-trading-bot/internal/engine/components"
	"crypto-trading-bot/internal/engine/service/exchange"

	"github.com/andygeiss/ecs"
)

type fetchDataSystem struct {
	ctx      context.Context
	executor *exchange.FetchDataExecutor
}

func NewFetchDataSystem(ctx context.Context) ecs.System {

	s := &fetchDataSystem{
		ctx: ctx,
	}

	// –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
	s.executor = exchange.NewFetchDataExecutor(ctx)
	// for _, cmd := range fetchDataCommands {
	// 	s.executor.SubmitCommand(cmd)
	// 	fmt.Printf("üì§ Submitted: %v\n", cmd)
	// }
	return s
}

func (s *fetchDataSystem) Process(em ecs.EntityManager) (state int) {

	// –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã datasource, –∏–∑ –Ω–∏—Ö –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –∫–∞–∫–∏–º —Å–∏–º–≤–æ–ª–∞–º –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ.
	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏

	grouped := make(map[string]exchange.FetchDataCommand)

	for _, dataComp := range em.FilterByMask(components.MaskDatasource) {

		datasource := dataComp.Get(components.MaskDatasource).(*components.DataSource)

		key := datasource.Symbol + datasource.Interval
		grouped[key] = exchange.FetchDataCommand{Symbol: datasource.Symbol, Interval: datasource.Interval}

	}

	return ecs.StateEngineContinue
}

func (s *fetchDataSystem) Setup() {}

func (s *fetchDataSystem) Teardown() {}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
var _ ecs.System = (*fetchDataSystem)(nil)
