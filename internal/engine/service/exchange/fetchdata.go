package exchange

import (
	"context"
	"fmt"
	"sync"
	"time"
)

// Config –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã/–∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
type FetchDataCommand struct {
	Symbol   string
	Interval string
}

// Result ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç goroutine
type FetchDataResult struct {
	Command   FetchDataCommand
	Data      []byte // –∏–ª–∏ –≤–∞—à —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: []OHLCV, map[string]interface{}, –∏ —Ç.–¥.
	Error     error
	Timestamp time.Time
}

// —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤—Å–µ—Ö goroutines
type FetchDataExecutor struct {
	results  map[FetchDataCommand]*FetchDataResult
	mu       sync.RWMutex
	commands chan FetchDataCommand // –≤—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
	done     chan struct{}         // —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	ctx      context.Context
	cancel   context.CancelFunc
}

func NewFetchDataExecutor(ctx context.Context) *FetchDataExecutor {
	ctx, cancel := context.WithCancel(ctx)
	te := &FetchDataExecutor{
		results:  make(map[FetchDataCommand]*FetchDataResult),
		commands: make(chan FetchDataCommand, 100), // –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
		done:     make(chan struct{}),
		ctx:      ctx,
		cancel:   cancel,
	}

	go te.worker() // –∑–∞–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤–æ—Ä–∫–µ—Ä
	return te
}

// SubmitCommand ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞
func (te *FetchDataExecutor) SubmitCommand(cmd FetchDataCommand) {
	select {
	case te.commands <- cmd:
		// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞
	default:
		fmt.Printf("‚ö†Ô∏è Trade queue full, command dropped: %v\n", cmd)
	}
}

// worker ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≥–æ—Ä—É—Ç–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func (te *FetchDataExecutor) worker() {
	ticker := time.NewTicker(500 * time.Millisecond)
	defer ticker.Stop()

	for {
		select {
		case <-te.ctx.Done():
			fmt.Println("üõë TradeExecutor shutting down...")
			close(te.done)
			return

		case cmd := <-te.commands:
			// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã ‚Äî –ù–ï –ë–õ–û–ö–ò–†–£–ï–ú worker!
			go te.executeCommand(cmd)

			// case <-ticker.C:
			// 	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
			// 	// –ù–∞–ø—Ä–∏–º–µ—Ä: –æ–ø—Ä–æ—Å API –Ω–∞ —Å—Ç–∞—Ç—É—Å pending-–æ—Ä–¥–µ—Ä–æ–≤
			// 	te.checkPendingOrders()
		}
	}
}

// executeTrade ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–≤ —Å–≤–æ–µ–π goroutine)
func (te *FetchDataExecutor) executeCommand(cmd FetchDataCommand) {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –±–∏—Ä–∂–µ–≤–æ–≥–æ API
	// –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: client.PlaceOrder(...)
	time.Sleep(200 * time.Millisecond) // –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–µ—Ç–∏

	var result FetchDataResult
	result.Command = cmd
	result.Timestamp = time.Now()

	// // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—Ö–∞/–æ—à–∏–±–∫–∏
	// if cmd.Amount < 0.001 {
	// 	result.Status = "rejected"
	// 	result.Error = fmt.Errorf("min order size is 0.001")
	// } else if cmd.Pair == "SOL/USDT" && cmd.Side == "sell" {
	// 	// –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
	// 	result.Status = "rejected"
	// 	result.Error = fmt.Errorf("sell blocked for SOL/USDT due to risk policy")
	// } else {
	// 	// –£—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
	// 	result.OrderID = fmt.Sprintf("ord_%d", time.Now().UnixNano())
	// 	result.ExecutedQty = cmd.Amount
	// 	result.Price = 100.0 // –∏–º–∏—Ç–∞—Ü–∏—è —Ü–µ–Ω—ã
	// 	result.Status = "filled"
	// }

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ
	te.mu.Lock()
	te.results[cmd] = &result
	te.mu.Unlock()

	// –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
	// –ù–∞–ø—Ä–∏–º–µ—Ä: te.events <- result
}

// GetResult ‚Äî –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ OrderID
func (te *FetchDataExecutor) GetResult(cmd FetchDataCommand) (*FetchDataResult, bool) {
	te.mu.RLock()
	defer te.mu.RUnlock()
	res, ok := te.results[cmd]
	return res, ok
}

// GetAllResults ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
func (te *FetchDataExecutor) GetAllResults() map[FetchDataCommand]*FetchDataResult {
	te.mu.RLock()
	defer te.mu.RUnlock()

	result := make(map[FetchDataCommand]*FetchDataResult, len(te.results))
	for k, v := range te.results {
		result[k] = v
	}
	return result
}

// Close ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
func (te *FetchDataExecutor) Close() {
	te.cancel()
	<-te.done
}

// func NewDataCollector() *FetchDataExecutor {
// 	return &FetchDataExecutor{
// 		results:  make(map[FetchDataCommand][]byte),
// 		channels: make(map[FetchDataCommand]chan FetchDataResult),
// 	}
// }

// // StartWorker –∑–∞–ø—É—Å–∫–∞–µ—Ç goroutine –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
// func (dc *FetchDataExecutor) StartWorker(ctx context.Context, config FetchDataCommand) {
// 	ch := make(chan FetchDataResult, 1) // –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä—É—Ç–∏–Ω—É
// 	dc.channels[config] = ch

// 	go func() {
// 		defer close(ch)
// 		for {
// 			select {
// 			case <-ctx.Done():
// 				return
// 			default:
// 				// –ó–¥–µ—Å—å –∏–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏
// 				// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API
// 				data := []byte(fmt.Sprintf("data for %s/%s", config.Symbol, config.Interval))
// 				result := FetchDataResult{
// 					Config:    config,
// 					Data:      data,
// 					Timestamp: time.Now(),
// 				}

// 				select {
// 				case ch <- result:
// 					// –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
// 				default:
// 					// –ö–∞–Ω–∞–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å–ø–µ–ª –∑–∞–±—Ä–∞—Ç—å
// 					// –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –±—É—Ñ–µ—Ä
// 				}

// 				time.Sleep(2 * time.Second) // –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
// 			}
// 		}
// 	}()
// }

// // CollectNonBlocking ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢–°–Ø
// func (dc *FetchDataExecutor) CollectNonBlocking() {
// 	for config, ch := range dc.channels {
// 		select {
// 		case result, ok := <-ch:
// 			if !ok {
// 				// –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç ‚Äî –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
// 				delete(dc.channels, config)
// 				fmt.Printf("Channel for %s/%s closed\n", config.Symbol, config.Interval)
// 				continue
// 			}

// 			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
// 			dc.mu.Lock()
// 			dc.results[config] = result.Data
// 			dc.mu.Unlock()

// 			fmt.Printf("‚úÖ Got result for %s/%s at %v\n", config.Symbol, config.Interval, result.Timestamp)
// 		default:
// 			// –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
// 		}
// 	}
// }

// // GetResults ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
// func (dc *FetchDataExecutor) GetResults() map[FetchDataCommand][]byte {
// 	dc.mu.RLock()
// 	defer dc.mu.RUnlock()

// 	result := make(map[FetchDataCommand][]byte, len(dc.results))
// 	for k, v := range dc.results {
// 		result[k] = v
// 	}
// 	return result
// }
