package exchange

import (
	"context"
	"crypto-trading-bot/internal/engine"
	"fmt"
	"testing"
	"time"
)

func TestFetchDataExecutor(t *testing.T) {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	executor := NewFetchDataExecutor(ctx)

	commands := []FetchDataCommand{
		{Symbol: "BTCUSDT", Interval: "1m"},
		{Symbol: "ETHUSDT", Interval: "1m"},
	}

	for _, cmd := range commands {
		executor.SubmitCommand(cmd)
		fmt.Printf("üì§ Submitted: %v\n", cmd)
	}

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Äî –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢–°–Ø!
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			fmt.Println("\n--- Main loop tick ---")

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –ù–ï –ë–õ–û–ö–ò–†–£–ï–ú–°–Ø!
			results := executor.GetAllResults()
			for cmd, res := range results {
				if res.Error != nil {
					fmt.Printf("‚ùå Error: %s %s | %v\n", cmd.Symbol, cmd.Interval, res.Error)
				} else {
					fmt.Printf("‚úÖ %s: %s %s\n",
						res.Command.Symbol, res.Command.Interval, res.Timestamp.Format(engine.TimeFormat))
				}
			}

			// –ú–æ–∂–Ω–æ –∑–¥–µ—Å—å –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ: –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –∑–∞–ø–æ–ª–Ω–∏–ª—Å—è ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π
			// –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫

		case <-time.After(8 * time.Second):
			fmt.Println("\nüõë Stopping after 8 seconds...")
			executor.Close()
			return
		}
	}
}
