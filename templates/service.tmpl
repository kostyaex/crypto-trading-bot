// {{ .PackageName }}/services/{{ .ModelName }}_service.go

package services

import (
    "{{ .PackageName }}/internal/models"
    "{{ .PackageName }}/internal/repositories"
    "{{ .PackageName }}/internal/utils"
)

// {{ .ModelName }}Service определяет интерфейс для бизнес-логики {{ .ModelName }}.
type {{ .ModelName }}Service interface {
    Get{{ .ModelName }}(id int) (*models.{{ .ModelName }}, error)
    Save{{ .ModelName }}({{ .ModelNameLower }} *models.{{ .ModelName }}) error
}

// {{ .ModelNameLower }}Service реализует {{ .ModelName }}Service.
type {{ .ModelNameLower }}Service struct {
    {{ .ModelNameLower }}Repo repositories.{{ .ModelName }}Repository
    logger         *utils.Logger
}

// New{{ .ModelName }}Service создает новый экземпляр {{ .ModelName }}Service.
func New{{ .ModelName }}Service({{ .ModelNameLower }}Repo repositories.{{ .ModelName }}Repository, logger *utils.Logger) {{ .ModelName }}Service {
    return &{{ .ModelNameLower }}Service{
    {{ .ModelNameLower }}Repo: {{ .ModelNameLower }},
    Repo, logger: logger
    }
}

// Get{{ .ModelName }} получает информацию о {{ .ModelNameLower }} по ID.
func (s *{{ .ModelNameLower }}Service) Get{{ .ModelName }}(id int) (*models.{{ .ModelName }}, error) {
    {{ .ModelNameLower }}, err := s.{{ .ModelNameLower }}Repo.Get{{ .ModelName }}(id)
    if err != nil {
        s.logger.Errorf("Failed to get {{ .ModelNameLower }}: %v", err)
        return nil, err
    }
    return {{ .ModelNameLower }}, nil
}

// Save{{ .ModelName }} сохраняет информацию о {{ .ModelNameLower }}.
func (s *{{ .ModelNameLower }}Service) Save{{ .ModelName }}({{ .ModelNameLower }} *models.{{ .ModelName }}) error {
    if err := s.{{ .ModelNameLower }}Repo.Save{{ .ModelName }}({{ .ModelNameLower }}); err != nil {
        s.logger.Errorf("Failed to save {{ .ModelNameLower }}: %v", err)
        return err
    }
    return nil
}