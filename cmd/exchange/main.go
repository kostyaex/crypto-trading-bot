package main

import (
	"context"
	"crypto-trading-bot/internal/exchange"
	"crypto-trading-bot/internal/exchange/exchanges/binance"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {
	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Binance
	ex := binance.NewBinanceExchange()

	// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–≤–µ—á–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ WebSocket
	log.Println("–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–≤–µ—á–∏ BTCUSDT 1m...")
	ex.SubscribeCandles("BTCUSDT", "1m", func(candle exchange.Candle) {
		log.Printf("üìà [WS] –°–≤–µ—á–∞: %s | %.2f - %.2f (–æ–±—ä—ë–º: %.2f)",
			candle.Timestamp.Format("15:04:05"),
			candle.Open, candle.Close, candle.Volume)
	})

	// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏
	log.Println("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π...")
	cmdID := ex.FetchCandlesAsync("BTCUSDT", "1m", 5)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	go func() {
		ticker := time.NewTicker(1 * time.Second)
		defer ticker.Stop()

		for {
			select {
			case <-ctx.Done():
				return
			case <-ticker.C:
				if result, ok := ex.GetResult(cmdID); ok {
					if err, isError := result.(error); isError {
						log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: %v", err)
					} else if candles, isCandles := result.([]exchange.Candle); isCandles {
						log.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ %d —Å–≤–µ—á–µ–π:", len(candles))
						for i, c := range candles {
							log.Printf("  %d) %s: O=%.2f H=%.2f L=%.2f C=%.2f V=%.2f",
								i+1, c.Timestamp.Format("15:04:05"), c.Open, c.High, c.Low, c.Close, c.Volume)
						}
						// –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è ‚Äî –æ—Ç–º–µ–Ω—è–µ–º —Ç–∏–∫–µ—Ä
						cancel()
					}
				}
			}
		}
	}()

	// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")

	// –û–∂–∏–¥–∞–µ–º SIGINT (Ctrl+C)
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
	<-sigChan

	log.Println("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
}
